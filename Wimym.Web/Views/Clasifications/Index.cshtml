@using System.Globalization
@model IEnumerable<Domain.TRK.Wallet>

@{
    ViewBag.Title = "Carteras";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<p>
     
        <a class="btn btn-success" href="@Url.Action("Resume", "Clasifications", new { area = "Expenses"   })"> <span class="fa fa-reply"></span> Volver al Resumen Financiero </a>
    
    <a class="btn btn-primary" href="@Url.Action("Create", "Clasifications", new {area = "Expenses"})"> <span class="fa fa-user-plus"></span> Registrar Cartera </a>
</p>

<div class="scroller">
    <table id="MyTable" class="table table-striped table-bordered responsive nowrap fixed">
        <thead>
            <tr>
                <th style="max-width: 10%">
                    @Html.DisplayNameFor(model => model.Code)
                </th>
                <th style="max-width: 30%">
                    @Html.DisplayNameFor(model => model.Description)
                </th>
                <th style="max-width: 15%">
                    @Html.DisplayNameFor(model => model.Amount)
                </th>
                @*<th>
                    @Html.DisplayNameFor(model => model.Amount2)
                </th>*@
                 
                <th  style="max-width: 5%"></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>


                    <td  style="max-width: 10%">
                        @Html.DisplayFor(modelItem => item.Code)
                    </td>
                    <td  style="max-width: 30%">
                        @Html.DisplayFor(modelItem => item.Description)
                    </td>
                    <td  style="max-width: 15%"  >
                        @Html.DisplayFor(modelItem => item.Amount)
                    </td>
                    @*<td>
                        @Html.DisplayFor(modelItem => item.Amount2)
                    </td>*@
                    
                    <td  style="max-width: 5%">
                        <a class="btn btn-warning" href="@Url.Action("Edit", "Clasifications", new { area = "Expenses" , id=@item.WalletId })"> <span class="fa fa-pencil-square-o"></span> Editar</a>
                        <a class="btn btn-info" href="@Url.Action("Details", "Clasifications", new { area = "Expenses" , id=@item.WalletId })"> <span class="fa fa-info"></span> Desglose de Informacion </a>
                        <a class="btn btn-danger" href="@Url.Action("Delete", "Clasifications", new { area = "Expenses" , id=@item.WalletId })" onclick="return confirm('Esta seguro que desea eliminar este registro?')"> <span class="fa fa-trash-o"></span> Eliminar </a>

                    </td>
                    <td></td>
                </tr>
            }

        </tbody>
    </table>

</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @*<script src="~/Scripts/DataTables/formatted-numbers.js"></script>*@
 
    <script>
        $(document).ready(function() {
            //function commaSeparateNumber(val) {
            //    while (/(\d+)(\d{3})/.test(val.toString())) {
            //        val = val.toString().replace(/(\d+)(\d{3})/, '$1' + ',' + '$2');
            //    }
            //    return val;
            //}
            //function renderDecimalNumber(oObj) {
            //    var num = new NumberFormat();
            //    num.setInputDecimal('.');
            //    num.setNumber(oObj.aData[oObj.iDataColumn]);
            //    num.setPlaces(this.oCustomInfo.decimalPlaces, true);
            //    num.setCurrency(false);
            //    num.setNegativeFormat(num.LEFT_DASH);
            //    num.setSeparators(true, this.oCustomInfo.decimalSeparator, this.oCustomInfo.thousandSeparator);

            //    return num.toFormatted();
            //};
            $('table').DataTable({
                //"columnDefs": [
                //    {
                //        "targets": 2,
                //        "type": "num-fmt"
                //    }]
                //"formatNumber": function ( toFormat ) {
                //    return toFormat.toString().replace(
                //        /\B(?=(\d{3})+(?!\d))/g, "'"
                //    );
                //},
                //"aoColumns": [{
                //    "sType": "numeric",
                //    "fnRender": function (oObj) {
                //        return renderDecimalNumber(oObj, {
                //            "decimalPlaces": 2,
                //            "thousandSeparator": " ",
                //            "decimalSeparator": "," });
                //    }, targets: 2
                //}],
               
                //"aoColumnDefs": [ {
                //    "aTargets": [ 2 ],
                //    "mRender": function (data, type, full) {
                //        var formmatedvalue=data.replace(//regex expression)
                //        return formmatedvalue;
                //    }
                //}],
        //         columnDefs: [
        //             { type: 'formatted-num' }, targets: 2
        //]

                //]
                //"columnDefs":
                //{
                //    // The `data` parameter refers to the data for the cell (defined by the
                //    // `data` option, which defaults to the column being worked with, in
                //    // this case `data: 0`.
                //    render: $.fn.dataTable.render.number(',', '.', 2, '$'),
                //    targets: 2
                //}

            });
        });
    </script>

}


